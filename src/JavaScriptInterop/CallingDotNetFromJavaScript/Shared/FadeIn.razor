@inject IJSRuntime JSRuntime
@implements IDisposable
@if (IsFading)
{
	<div @ref=WrapperElement>
		<div style="visibility : @( HasStarted ? "visible" : "hidden")">
			@ChildContent
		</div>
	</div>
}
else
{
	@ChildContent
}
@code
{
	[Parameter] public RenderFragment ChildContent { get; set; }
	[Parameter] public float Duration { get; set; } = 0.5f;
	[Parameter] public EventCallback<string> AnimationStarted { get; set; }
	[Parameter] public EventCallback<string> AnimationEnded { get; set; }

	bool HasStarted;
	bool IsFading = true;
	ElementReference WrapperElement;
	DotNetObjectReference<FadeIn> ObjectReference;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		base.OnAfterRender(firstRender);
		if (firstRender)
		{
			ObjectReference = DotNetObjectReference.Create(this);
			await JSRuntime.InvokeVoidAsync("BlazorUniversity.animate", WrapperElement, "fade-in", Duration, ObjectReference);
		}
	}

	[JSInvokable("NotifyAnimationStarted")]
	public void NotifyAnimationStarted(string animationName)
	{
		HasStarted = true;
		StateHasChanged();
		AnimationStarted.InvokeAsync(animationName);
	}

	[JSInvokable("NotifyAnimationEnded")]
	public void NotifyAnimationEnded(string animationName)
	{
		IsFading = false;
		StateHasChanged();
		AnimationEnded.InvokeAsync(animationName);
	}

	void IDisposable.Dispose()
	{
		if (ObjectReference != null)
		{
			ObjectReference.Dispose();
		}
	}
}
