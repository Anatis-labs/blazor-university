@inject IJSRuntime JSRuntime
@if (IsFading)
{
    <div @ref=WrapperElement>
        <div style="visibility : @( HasStarted ? "visible" : "hidden")">
            @ChildContent
        </div>
    </div>
}
else
{
    @ChildContent
}
@code
{
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public float Duration { get; set; } = 0.5f;

    bool HasStarted;
    bool IsFading = true;
    ElementReference WrapperElement;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            var thisReference = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("BlazorUniversity.animate", WrapperElement, "fade-in", Duration, thisReference);
        }
    }

    [JSInvokable("AnimationStarted")]
    public void AnimationStarted(string animationName)
    {
        HasStarted = true;
        InvokeAsync(StateHasChanged);
    }

    [JSInvokable("AnimationEnded")]
    public void AnimationEnded(string animationName)
    {
        IsFading = false;
        InvokeAsync(StateHasChanged);
    }
}
